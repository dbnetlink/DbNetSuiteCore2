@model DbNetTimeCore.Models.GridViewModel
@using System.Data
@using DbNetTimeCore.Models
@using Microsoft.AspNetCore.Html
@using System.Text.Json

<div class="flex flex-col">
    <div class="flex flex-row gap-1 items-center">
        <input class="input input-bordered input-sm" type="search" placeholder="Search" aria-label="Search" name="searchInput" value="@Model.SearchInput">
        <button class="btn btn-sm mr-5 p-1" type="button" hx-post="@Model.SearchUrl" hx-target="#@Model.GridId" hx-swap="innerHTML" title="Search">@Html.Raw(SearchIcon())</button>

        @if (Model.TotalPages == 0)
        {
            <div class="p-1 rounded-md border-solid border-slate-300 bg-slate-100 flex flex-row gap-2">
                @Html.Raw(InfoIcon())
                <span>No records found</span>
            </div>
        }
        else
        {
            RenderNavButton(Model.PreviousPage, Model.FirstPageUrl, FirstIcon(), "First page");
            RenderNavButton(Model.PreviousPage, Model.PreviousPageUrl, PreviousIcon(), "Previous page");
            <span class="">Page</span>
            RenderPageNumber(Model.CurrentPage);
            <span class="">of</span>
            RenderPageNumber(Model.TotalPages);
            RenderNavButton(Model.NextPage, Model.NextPageUrl, NextIcon(), "Next page");
            RenderNavButton(Model.NextPage, Model.LastPageUrl, LastIcon(), "Last page");
        }
    </div>
    <div class="flex mt-2">
        <table class="htmx-table">
            <thead>
                <tr class="bg-slate-200">
                    @foreach (ColumnModel columnInfo in Model.ColumnInfo)
                    {
                        <th class="text-base" style="cursor:pointer" data-columnname="@(columnInfo.ColumnName)" hx-vals='{"sortKey":"@(columnInfo.Key)"}' hx-post="@Model.SearchUrl" hx-target="#@Model.GridId" hx-swap="innerHTML">
                            <div class="flex flex-row justify-between items-center">@(columnInfo?.Label) <span class="text-slate-400">@SortIcon(Model.IsSortColumn(columnInfo), Model.CurrentSortAscending)</span></div>
                        </th>
                    }
                    @if (Model.HasPrimaryKey)
                    {
                        <th>&nbsp;</th>
                    }
                </tr>
            </thead>
            <tbody data-currentpage="@Model.CurrentPage" data-totalpages="@Model.TotalPages">
                @foreach (DataRow row in Model.Rows)
                {
                    <tr style="cursor:pointer" class="grid-row">
                        @foreach (DataColumn col in Model.Columns)
                        {
                            GridColumnModel? columnInfo = Model.GetColumnInfo(col);
                            var classes = new List<string>() { "text-base" };

                            if (col.DataType == typeof(Int64) || col.DataType == typeof(Double))
                            {
                                classes.Add("text-right");
                            }

                            if (col.DataType == typeof(Boolean))
                            {
                                classes.Add("text-center");
                            }

                            if (col.DataType == typeof(Boolean))
                            {
                                <td class="@(string.Join(" ",classes))"><div class="flex justify-center items-center">@Html.Raw(Convert.ToBoolean(row[col]) ? CheckedIcon() : UncheckedIcon())</div></td>
                            }
                            else
                            {
                                var value = FormatValue(row[col], columnInfo);
                                if (columnInfo.MaxTextLength.HasValue && value.ToString().Length > columnInfo.MaxTextLength.Value)
                                {
                                    <td class="@(string.Join(" ",classes))">
                                        <div class="tooltip" data-tip="@Html.Raw(value)">
                                            @Html.Raw($"{value.ToString().Substring(0, columnInfo.MaxTextLength.Value)}...")
                                        </div>
                                    </td>
                                }
                                else
                                {
                                    <td class="@(string.Join(" ",classes))">@Html.Raw(value)</td>
                                }
                            }
                        }
                        @if (Model.HasPrimaryKey)
                        {
                            <td>
                                <button class="btn btn-sm w-8 p-0 text-slate-600" type="button" hx-vals='{"colSpan":"@(Model.Columns.Count()+1)"}' hx-post="@Model.EditUrl(row)" hx-target="closest tr" hx-swap="outerHTML">
                                    @Html.Raw(EditIcon())
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
        <input type="hidden" name="currentSortKey" value="@Model.CurrentSortKey" />
        <input type="hidden" name="currentSortAscending" value="@Model.CurrentSortAscending.ToString()" />
        <input type="hidden" name="model" value="@JsonSerializer.Serialize(Model.GridModel)">
    </div>
</div>


@functions {
    void RenderNavButton(bool enable, string url, HtmlString icon, string title)
    {
        <button class="btn btn-sm p-1" type="button" title="@title" @(enable ? null : "disabled") hx-post="@url" hx-target="#@Model.GridId" hx-swap="innerHTML">@icon</button>
    }

    void RenderPageNumber(int pageNumber)
    {
        <input class="input input-bordered input-sm" style="width:@(pageNumber.ToString().Length + 2)em" readonly type="text" value="@pageNumber" />
    }

    public static object? FormatValue(object? value, GridColumnModel? columnInfo)
    {
        if (string.IsNullOrEmpty(columnInfo?.Format) || value == null)
        {
            return value;
        }

        string format = columnInfo!.Format;

        switch (format)
        {
            case "email":
                value = $"<a href=\"mailto:{value}\">{value}</a>";
                break;
            case "www":
                value = $"<a target=\"_blank\" href=\"{value}\">{value}</a>";
                break;
            default:
                if (columnInfo?.DataType == typeof(DateTime))
                {
                    value = Convert.ToDateTime(value).ToString(format);
                }
                if (columnInfo?.DataType == typeof(Int64))
                {
                    value = Convert.ToInt64(value).ToString(format);
                }
                if (columnInfo?.DataType == typeof(Double))
                {
                    value = Convert.ToDouble(value).ToString(format);
                }

                break;
        }

        return value;
    }

    HtmlString InfoIcon()
    {
        return IconSVG("m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z");
    }

    HtmlString EditIcon()
    {
        return IconSVG("m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10");
    }

    HtmlString SortIcon(bool isSortColumn, bool sortAscending)
    {
        if (isSortColumn)
        {
            if (sortAscending)
            {
                return ArrowUpIcon();
            }
            else
            {
                return ArrowDownIcon();
            }
        }
        else
        {
            return new HtmlString(string.Empty);
        }
    }

    HtmlString SearchIcon()
    {
        return IconSVG("m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z");
    }

    HtmlString FirstIcon()
    {
        return IconSVG("m18.75 4.5-7.5 7.5 7.5 7.5m-6-15L5.25 12l7.5 7.5");
    }

    HtmlString LastIcon()
    {
        return IconSVG("m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5");
    }

    HtmlString PreviousIcon()
    {
        return IconSVG("M15.75 19.5 8.25 12l7.5-7.5");
    }

    HtmlString NextIcon()
    {
        return IconSVG("m8.25 4.5 7.5 7.5-7.5 7.5");
    }
    HtmlString ArrowDownIcon()
    {
        return IconSVG("M19.5 13.5 12 21m0 0-7.5-7.5M12 21V3");
    }

    HtmlString ArrowUpIcon()
    {
        return IconSVG("M4.5 10.5 12 3m0 0 7.5 7.5M12 3v18");
    }

    HtmlString CheckedIcon()
    {
        return MaterialSVG("m424-312 282-282-56-56-226 226-114-114-56 56 170 170ZM200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Zm0-560v560-560Z");
    }

    HtmlString UncheckedIcon()
    {
        return MaterialSVG("M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Z");
    }

    HtmlString IconSVG(string data)
    {
        return new HtmlString("<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" class=\"size-6\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"{d}\"/></svg>".Replace("{d}", data));
    }

    HtmlString MaterialSVG(string data)
    {
        return new HtmlString("<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#5f6368\"><path d=\"{d}\" /></svg>".Replace("{d}", data));
    }
}