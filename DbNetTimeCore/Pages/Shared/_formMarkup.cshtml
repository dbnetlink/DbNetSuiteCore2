@model DbNetTimeCore.Models.DataGrid
@using System.Data
@using DbNetTimeCore.Helpers
@using DbNetTimeCore.Enums
@using DbNetTimeCore.Models
@using Microsoft.AspNetCore.Html

<tr class="form-row">
    <td colspan="@Model.ColSpan">
        <form name="edit-form">
            <div class="flex flex-col border-solid border border-slate-300 bg-slate-100 rounded-md">
                <div class="flex m-2">

                    <table class="htmx-table">
                        <tbody>
                            @foreach (DataRow row in Model.Rows)
                            {
                                <tr>
                                    @foreach (DataColumn col in Model.Columns)
                                    {
                                        ColumnInfo? columnInfo = Model.GetColumnInfo(col);
                                        if (columnInfo!.IsPrimaryKey)
                                        {
                                            continue;
                                        }
                                        <th>@columnInfo.Label</th>
                                    }
                                </tr>
                                <tr>

                                    @foreach (DataColumn col in Model.Columns)
                                    {
                                        ColumnInfo? columnInfo = Model.GetColumnInfo(col);
                                        if (columnInfo!.IsPrimaryKey)
                                        {
                                            continue;
                                        }
                                        <td class="align-top">
                                            @if (columnInfo.EditControlType != null)
                                            {
                                                switch (columnInfo.EditControlType.Value)
                                                {
                                                    case DbNetTimeCore.Enums.EditControlType.MultiSelect:
                                                        var values = (row[col]?.ToString() ?? string.Empty).Split(",").ToList();
                                                        <select class="select select-bordered w-full max-w-xs" multiple size="5" name="@col.ColumnName">
                                                            @foreach (KeyValuePair<string, string> option in EnumHelper.GetEnumOptions(columnInfo.LookupEnum))
                                                            {
                                                                <option value="@option.Key" @(values.Contains(option.Key) ? "selected" : string.Empty)>@option.Value</option>
                                                            }
                                                        </select>
                                                        break;
                                                    case DbNetTimeCore.Enums.EditControlType.TextArea:
                                                        <textarea class="textarea textarea-bordered">@(row[col]?.ToString() ?? string.Empty)</textarea>
                                                        break;
                                                }
                                            }
                                            else if (columnInfo.Lookup != null)
                                            {
                                                <select class="select select-bordered w-full max-w-xs" name="@col.ColumnName">
                                                    @foreach (DataRow option in columnInfo.LookupValues.Rows)
                                                    {
                                                        <option value="@option[0].ToString()" @((row[col]?.ToString() ?? string.Empty) == option[0].ToString() ? "selected" : string.Empty)>@option[1].ToString()</option>
                                                    }
                                                </select>
                                            }
                                            else if (columnInfo.LookupEnum != null)
                                            {
                                                <select class="select select-bordered w-full max-w-xs" name="@col.ColumnName">
                                                    @foreach (KeyValuePair<string, string> option in EnumHelper.GetEnumOptions(columnInfo.LookupEnum))
                                                    {
                                                        <option value="@option.Key" @((row[col]?.ToString() ?? string.Empty) == option.Key ? "selected" : string.Empty)>@option.Value</option>
                                                    }
                                                </select>
                                            }
                                            else if (columnInfo.DataType == typeof(Boolean))
                                            {
                                                <input type="checkbox" name="@col.ColumnName" class="checkbox checkbox-lg" @(IsBoolean(row[col]) ? "checked" : null) />
                                            }
                                            else
                                            {
                                                <input type="text" name="@col.ColumnName" class="input input-bordered max-w-xs @columnInfo.ClassName" @(columnInfo.IsPrimaryKey ? "disabled" : null) value="@Html.Raw(row[col])" />
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
                <hr class="h-px my-1 bg-gray-200 border-0 dark:bg-gray-700">
                <div class="flex m-2 justify-end gap-4">
                    <div id="@(Model.GridId)formMessage" class="message flex grow border-solid border border-slate-300 bg-slate-100 rounded-md px-2 align-middle items-center"></div>
                    <button class="btn btn-primary" type="button" hx-vals='{"colSpan":"@(Model.ColSpan)"}' hx-post="@Model.SaveUrl(Model.Rows.First())" hx-target="closest tr" hx-swap="outerHTML">Save</button>
                    <button class="btn cancel-btn" type="button" hx-post="@Model.SearchUrl" hx-target="#@Model.GridId" hx-swap="innerHTML">Cancel</button>
                    @if (!string.IsNullOrEmpty(Model.Message))
                    {
                        <script>
                            me(".message").innerText = "@(Model.Message)";
                            me(".message").classAdd("font-bold").classAdd("bg-teal-300");
                            setTimeout(@(Model.GridId)clearMessage, 3000);

                            function @(Model.GridId)clearMessage() {
                                me(".cancel-btn").click()
                            }
                        </script>
                    }
                </div>

            </div>
        </form>
    </td>
</tr>

@functions {
    bool IsBoolean(object value)
    {
        try
        {
            return Convert.ToBoolean(Convert.ToInt16(value));
        }
        catch
        {
            return false;
        }
    }
    void RenderNavButton(bool enable, string url, HtmlString icon, string title)
    {
        <button class="btn btn-sm p-1" type="button" title="@title" @(enable ? null : "disabled")>@icon</button>
    }
}