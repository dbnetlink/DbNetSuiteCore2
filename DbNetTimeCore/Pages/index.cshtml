@model DbNetTimeCore.Pages.IndexModel
@{
    Layout = "_Layout";
}


<div role="tablist" class="tabs tabs-lifted m-5  tabs-lg">
    <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Customers" checked />
    <div role="tabpanel" class="tab-content bg-base-100 border-base-300 rounded-box p-6">
        @await Html.PartialAsync("~/Pages/Shared/_gridControl.cshtml", Model.CustomersGrid)
    </div>

    <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Films" />
    <div role="tabpanel" class="tab-content bg-base-100 border-base-300 rounded-box p-6">
        @await Html.PartialAsync("~/Pages/Shared/_gridControl.cshtml", Model.FilmsGrid)
    </div>

    <input type="radio" name="my_tabs_2" role="tab" class="tab" aria-label="Actors" />
    <div role="tabpanel" class="tab-content bg-base-100 border-base-300 rounded-box p-6">
        @await Html.PartialAsync("~/Pages/Shared/_gridControl.cshtml", Model.ActorsGrid)
    </div>
</div>


@section Scripts { 
    <script>
        document.addEventListener("customersGrid:pageLoaded", reRenderActive);

        function reRenderActive(event) {
            if (event.detail.htmxEvent)
            {
                if (event.detail.htmxEvent.target.tagName = "TBODY") { 
                    return
                }
            }

            event.detail.gridControl.columnCells("active").run(cell => { transformActiveCell(cell) })
        }

        function transformActiveCell(cell) {
            if (cell.innerText == "0")
            {
                cell.innerText = "";
            }
            else
            {
                me(cell).classAdd("text-green-500");
                cell.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"size-6\"><path stroke-linecap=\"round\" stroke - linejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\"/></svg>";
            }
        }

    </script>
    <script>
        class GridControl {
            constructor(gridId) {
                this.gridId = gridId;
                this.init();
                let self = this;
            }

            gridId = "";
            bgColourClass = "bg-cyan-600";
            textColourClass = "text-zinc-100";
            linkColourClass = "text-blue-500";

            tableSelector() {
                return `#${this.gridId} table`
            }

            rowSelector() {
                return `#${this.gridId} tbody tr.grid-row`
            }

            linkSelector() {
                return `#${this.gridId} tbody a`
            }

            columnCells(columnName) {
                let th = me(`#${this.gridId} th[data-columnname='${columnName.toLowerCase()}']`)
                return any(`#${this.gridId} td:nth-child(${(th.cellIndex+1)})`)
            }

            init(evt) {
                document.querySelectorAll(this.linkSelector()).forEach((e) => { me(e).classAdd(this.linkColourClass).classAdd("underline") });
                document.querySelectorAll(this.rowSelector()).forEach((e) => { me(e).on("click", ev => this.highlightRow(me(ev))) });
                document.querySelector(this.rowSelector()).click();
                const event = new CustomEvent(`${this.gridId}:pageLoaded`, { detail: { gridControl: this, htmxEvent: evt } });
                document.dispatchEvent(event);
            }

            highlightRow(tr) {
                this.clearHighlighting();
                me(tr).classAdd(this.bgColourClass).classAdd(this.textColourClass);
                any(me(tr).querySelectorAll("a")).classRemove(this.linkColourClass);
            }

            clearHighlighting() {
                any(this.rowSelector()).run(e => {
                    let tr = e.closest("tr");
                    me(tr).classRemove(this.bgColourClass).classRemove(this.textColourClass);
                    any(me(tr).querySelectorAll("a")).classAdd(this.linkColourClass);
                });
            }
        }
    </script>
}