@page
@using DbNetTimeCore.Enums
@using DbNetTimeCore.Helpers
@using TQ.Models

@{
    var customerColumns = new List<GridColumnModel>
    {
        new GridColumnModel("customer.customer_id", "CustomerID"),
        new GridColumnModel("customer.first_name", "Forename", true),
        new GridColumnModel("customer.last_name", "Surname", true),
        new GridColumnModel("customer.email", "Email Address", true) {Format = "email" },
        new GridColumnModel("address.address", "Address", true),
        new GridColumnModel("city.city", "City", true),
        new GridColumnModel("address.postal_code", "Post Code", true),
        new GridColumnModel("customer.active", "Active") {DataType = typeof(Boolean)},
        new GridColumnModel("customer.create_date", "Created") {Format = "dd/MM/yy", DataType = typeof(DateTime)},
        new GridColumnModel("customer.last_update", "Last Updated") {Format = "dd/MM/yy", DataType = typeof(DateTime)}
    };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Customers</title>
    <link rel="stylesheet" href="css.htmx" />
</head>
<body>
    <main style="padding:20px">
        @Html.Raw(await new TQ.Components.GridControl(HttpContext).Render(new GridModel(DataSourceType.SQlite, "Sakila", "Customer join Address on Customer.Address_Id == Address.Address_Id join City on City.City_Id = Address.City_Id")
   {
       Columns = customerColumns
   }))
    </main>
    <script src="js.htmx"></script>
</body>
</html>

