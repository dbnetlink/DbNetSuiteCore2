@model DbNetSuiteCore.Web.ViewModels.BrowseDbModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContext
@using System.Data
@using DbNetSuiteCore.Enums
@using DbNetSuiteCore.Models
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Extensions

<div style="padding:20px">
    <form method="post">
        <div class="d-flex align-items-center" style="gap:10px">
            <div>Database</div>
            <div>
                <select class="form-select" name="ConnectionAlias" onchange="this.form.submit()" value="@Model.TableName">
                    <option value="">Select connection</option>
                    @foreach (string connection in Model.Connections)
                    {
                        var selected = (connection == Model.ConnectionAlias);
                        <option value="@connection" selected="@selected">@connection</option>
                    }
                </select>
            </div>
            <div>Table/View</div>
            <div>
                <select class="form-select" name="TableName" onchange="this.form.submit()" value="@Model.TableName" autofocus>
                    @if (string.IsNullOrEmpty(Model.ConnectionAlias) == false)
                    {
                        <option value="">Select table</option>
                        <option value="All" selected="@("All" == Model.TableName)">All</option>
                        @foreach (string tableName in Model.Tables)
                        {
                            var selected = (tableName == Model.TableName);
                            <option value="@tableName" selected="@selected">@tableName</option>
                        }
                    }
                </select>
            </div>
        </div>
    </form>

    <div style="margin-top:10px">
        @{
            if (Model.TableName != string.Empty)
            {
                if (Model.TableName == "All")
                {
                        <div class="accordion" id="accordionExample">
                            @foreach (string tableName in Model.Tables)
                        {
                            var tab = CleanTableName(tableName);
                            var first = (tab == CleanTableName(Model.Tables.First()));
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="heading@(tab)">
                                        <button class="accordion-button@(first ? "" : " collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#@(tab)" aria-expanded="true" aria-controls="@(tab)" aria-expanded="@(first ? "true" : "false")">
                                            @TextHelper.GenerateLabel(tab)
                                        </button>
                                    </h2>
                                    <div id="@(tab)" class="accordion-collapse collapse@(first ? " show" : "")" aria-labelledby="heading@(tab)" data-bs-parent="#accordionExample">
                                        <div class="accordion-body">
                                            @(await new DbNetSuiteCore.GridControl(_httpContext.HttpContext).Render(new GridModel(Model.DataSourceType, Model.ConnectionAlias, tableName) {  }))
                                        </div>
                                    </div>
                                </div>
                        }

                        </div>
                }
                else
                {
                        GridModel gridModel = new GridModel(Model.DataSourceType, Model.ConnectionAlias, Model.TableName);
                        gridModel.ClientEvents[ClientEvent.FileDownload] = "setFileName";
                                @(await new DbNetSuiteCore.GridControl(_httpContext.HttpContext).Render(gridModel))
                        }
            }

        }
    </div>

    <script>
        function setFileName(sender, args) { 
            args.link.download = "@(CleanTableName(Model.TableName))." + args.extension
        }

    </script>
    

@functions
{
    string CleanTableName(string tableName)
    {
        return tableName.Split(".").Last().Replace("[", "").Replace("]", "").Replace(" ", "");
    }
}
