@model DbNetSuiteCore.ViewModels.FormViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Extensions
@using DbNetSuiteCore.Enums

<div class="form-and-toolbar">
    @if (Model.FormModel.ToolbarPosition != ToolbarPosition.Bottom && Model.HideToolbar == false)
    {
        @await Html.PartialAsync("Form/Toolbar")
    }

    <div class="form-body" data-currentrecord="@Model.CurrentRecord" data-recordcount="@Model.RecordCount" data-unappliedmessage="@ResourceHelper.GetResourceString(ResourceNames.UnappliedChanges)" data-mode="@Model.FormModel.Mode" data-validationpassed="@Model.FormModel.ValidationPassed" data-committype="@Model.FormModel.CommitType" data-id="@Model.RecordId">
        @if (string.IsNullOrEmpty(Model.FormModel.Caption) == false)
        {
            <div class="flex text-lg caption">@Model.FormModel.Caption</div>
        }
        <div class="gap-2 my-2" style="display:grid;grid-template-columns: repeat(4, auto)">
            @foreach (FormColumn formColumn in Model.Columns)
            {
                object value = null;
                object dbValue = null;

                if (Model.FormModel.Mode == FormMode.Update)
                {
                    DataColumn? dataColumn = Model.GetDataColumn(formColumn);
                    dbValue = dataColumn == null ? string.Empty : formColumn.FormatValue(Model.Record[dataColumn]);
                    value = dbValue;
                }

                if (Model.FormModel.Mode == FormMode.Insert)
                {
                    if (formColumn.PrimaryKey == false)
                    {
                        value = formColumn.InitialValue;
                    }
                    dbValue = "";
                }

                if (Model.FormModel.FormValues.Keys.Contains(formColumn.ColumnName))
                {
                    value = Model.FormModel.FormValues[formColumn.ColumnName];
                }

                <div style="display:grid;grid-template-columns: repeat(1, auto)">
                    @{
                        FormControl(formColumn, value, dbValue);
                    }
                </div>
            }
        </div>
        @await Html.PartialAsync("Form/Hidden", Model.FormModel)
        @if (Model.FormModel.IsLinked)
        {
            <input type="hidden" name="@TriggerNames.ParentKey" hx-trigger="changed" hx-post="@Model.SubmitUrl" hx-target="@Model.HxTarget" hx-swap="innerHTML" hx-indicator="next .htmx-indicator" value="@Model.FormModel.ParentKey" />
        }
    </div>
    @if (Model.FormModel.ToolbarPosition == ToolbarPosition.Bottom && Model.HideToolbar == false)
    {
        @await Html.PartialAsync("Form/Toolbar")
    }
    @{
        HtmlString highlightAttr = new HtmlString("");
        if (string.IsNullOrEmpty(Model.FormModel.Message))
        {
            Model.FormModel.Message = "&nbsp;";
        }
        else
        {
            highlightAttr = RazorHelper.Attribute("data-highlight", Model.FormModel.MessageType.ToString().ToLower());
        }

        <div id="form-message" class="border rounded border-slate-300 p-1 my-1" @highlightAttr>@Html.Raw(Model.FormModel.Message)</div>
    }
</div>


@functions {
    public void FormControl(FormColumn formColumn, object value, object dbValue)
    {
        <label for="@(formColumn.ColumnName)" class="font-bold text-slate-800">@formColumn.Label</label>

        var attributes = new Dictionary<string, string>();

        switch (formColumn.ControlType)
        {
            case FormControlType.Number:
            case FormControlType.Email:
            case FormControlType.Url:
            case FormControlType.Color:
            case FormControlType.Password:
            case FormControlType.Range:
            case FormControlType.Tel:
            case FormControlType.Week:
            case FormControlType.Month:
                attributes["type"] = formColumn.ControlType.ToString().ToLower();
                break;
            case FormControlType.DateTime:
                attributes["type"] = "datetime-local";
                break;
            default:
                switch (formColumn.DataTypeName)
                {
                    case nameof(DateTime):
                    case nameof(DateTimeOffset):
                        attributes["type"] = "date";
                        break;
                    case nameof(TimeSpan):
                        attributes["type"] = "time";
                        break;
                    default:
                        attributes["type"] = "text";
                        break;
                }
                break;
        }

       
        attributes["name"] = $"_{formColumn.ColumnName}";
        attributes["data-value"] = $"{dbValue}";
        attributes["value"] = $"{value}";
        attributes["data-datatype"] = formColumn.DataTypeName;
        attributes["data-dbdatatype"] = formColumn.DbDataType;
        attributes["class"] = Classes(formColumn);
        attributes["data-error"] = formColumn.InError.ToString().ToLower();
        
         switch (formColumn.ControlType)
        {
            case FormControlType.Time:
            case FormControlType.TimeWithSeconds:
                attributes["type"] = "time";
                if (formColumn.ControlType == FormControlType.TimeWithSeconds)
                {
                    attributes["step"] = "1";
                }
                break;
        }

        if (formColumn.DbDataType == "tinyint")
        {
            attributes["min"] = formColumn.MinValue.ToString();
            attributes["max"] = formColumn.MaxValue.ToString();
        }

        if (formColumn.LookupOptions != null)
        {
            RenderSelect(formColumn, value, attributes);
        }
        else if (formColumn.DataType == typeof(Boolean))
        {
            attributes.Remove("value");
            attributes.Remove("data-error");
            attributes["class"] = CheckboxClasses(formColumn);
            attributes["style"] = "transform: scale(1.5);margin-left:5px";

            bool boolValue = ComponentModelExtensions.ParseBoolean(value);
            <input type="checkbox" @RazorHelper.Attributes(attributes) @(CheckboxAttributes(formColumn, boolValue)) />
        }
        else
        {
            if (formColumn.TextTransform.HasValue)
            {
                attributes["data-texttransform"] = formColumn.TextTransform.ToString();
            }
            switch (attributes["type"])
            {
                case "text":
                if (formColumn.DataType == typeof(string))
                {
                    attributes["maxlength"] = formColumn.MaxLength?.ToString();
                }
                break;
            }
            <input @RazorHelper.Attributes(attributes) @(Attributes(formColumn)) />
        }
    }

    void RenderSelect(FormColumn formColumn, object value, Dictionary<string, string> attributes)
    {
        if (formColumn.DataType == typeof(Boolean))
        {
            value = ComponentModelExtensions.ParseBoolean(value) ? 1 : 0;
        }
        <select @RazorHelper.Attributes(attributes) @(Attributes(formColumn))>
            <option value=""></option>
            @foreach (var option in formColumn.LookupOptions)
            {
                <option value="@option.Key" @(option.Key == (value?.ToString() ?? string.Empty) ? "selected" : "")>@option.Value</option>
            }
        </select>
    }

    string CheckboxClasses(FormColumn formColumn)
    {
        List<string> classes = new List<string>() { "fc-control" };

        if (formColumn.ReadOnly || Model.FormModel.ReadOnly)
        {
            classes.Add("readonly");
        }

        return string.Join(" ", classes);
    }

    string Classes(FormColumn formColumn)
    {
        List<string> classes = new List<string>() { "fc-control w-full" };
        if (formColumn.IsNumeric && formColumn.LookupOptions == null)
        {
            classes.Add("text-right");
        }

        if (formColumn.ReadOnly || formColumn.DataType == typeof(Guid) || Model.FormModel.ReadOnly)
        {
            classes.Add("readonly");
        }

        return string.Join(" ", classes);
    }

    string Attributes(FormColumn formColumn)
    {
        List<string> attributes = new List<string>();
        if (Disable(formColumn))
        {
            attributes.Add("disabled");
        }
        if (formColumn.Required)
        {
            attributes.Add("required");
        }
        if ((formColumn.ReadOnly && formColumn.LookupOptions == null) || Model.FormModel.ReadOnly)
        {
            attributes.Add("readonly");
        }
        return string.Join(" ", attributes);
    }

    string CheckboxAttributes(FormColumn formColumn, bool boolValue)
    {
        List<string> attributes = new List<string>();
        if (formColumn.Disabled || Model.FormModel.Mode == FormMode.Empty)
        {
            attributes.Add("disabled");
        }

        if (boolValue)
        {
            attributes.Add("checked");
        }

        return string.Join(" ", attributes);
    }

    bool Disable(FormColumn formColumn)
    {
        if (Model.FormModel.Mode == FormMode.Insert && formColumn.PrimaryKeyRequired)
        {
            return false;
        }
        return (formColumn.PrimaryKey || formColumn.ForeignKey || formColumn.Disabled || Model.FormModel.Mode == FormMode.Empty);
    }
}