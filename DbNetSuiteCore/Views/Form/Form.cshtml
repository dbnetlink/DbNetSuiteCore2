@model DbNetSuiteCore.ViewModels.FormViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using MongoDB.Bson
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Extensions
@using DbNetSuiteCore.Enums
@using System.Text.Encodings.Web

<div class="form-and-toolbar">
    @if (Model.FormModel.ToolbarPosition != ToolbarPosition.Bottom && Model.HideToolbar == false)
    {
        @await Html.PartialAsync("Form/Toolbar")
    }

    <div class="form-body" data-currentrecord="@Model.CurrentRecord" data-recordcount="@Model.RecordCount" data-unappliedmessage="@ResourceHelper.GetResourceString(ResourceNames.UnappliedChanges)" data-mode="@Model.FormModel.Mode" data-validationpassed="@Model.FormModel.ValidationPassed" data-committype="@Model.FormModel.CommitType" data-id="@Model.RecordId">
        @if (string.IsNullOrEmpty(Model.FormModel.Caption) == false)
        {
            <div class="flex text-lg caption">@Model.FormModel.Caption</div>
        }
        <div class="gap-2 my-2" style="display:grid;grid-template-columns: repeat(4, auto)">
            @foreach (FormColumn formColumn in Model.Columns)
            {
                object value = null;
                object dbValue = null;

                if (Model.FormModel.Mode == FormMode.Update)
                {
                    DataColumn? dataColumn = Model.GetDataColumn(formColumn);
                    dbValue = (dataColumn == null) ? string.Empty : formColumn.FormatValue(Model.Record[dataColumn]);
                    value = dbValue;
                }

                if (Model.FormModel.Mode == FormMode.Insert)
                {
                    if (formColumn.PrimaryKey == false)
                    {
                        value = formColumn.InitialValue;
                    }
                    dbValue = "";
                }

                if (Model.FormModel.FormValues.Keys.Contains(formColumn.ColumnName))
                {
                    value = Model.FormModel.FormValues[formColumn.ColumnName];
                }

                <div style="display:grid;grid-template-columns: repeat(1, auto)">
                    @{
                        @formColumn.RenderLabel()
                        @formColumn.RenderControl(value?.ToString() ?? string.Empty, value?.ToString() ?? string.Empty, Model.FormModel)
                   }
                </div>
            }
        </div>
        @await Html.PartialAsync("Form/Hidden", Model.FormModel)
        @if (Model.FormModel.IsLinked)
        {
            <input type="hidden" name="@TriggerNames.ParentKey" hx-trigger="changed" hx-post="@Model.SubmitUrl" hx-target="@Model.HxTarget" hx-swap="innerHTML" hx-indicator="next .htmx-indicator" value="@Model.FormModel.ParentKey" />
        }
    </div>
    @if (Model.FormModel.ToolbarPosition == ToolbarPosition.Bottom && Model.HideToolbar == false)
    {
        @await Html.PartialAsync("Form/Toolbar")
    }
    @{
        HtmlString highlightAttr = new HtmlString("");
        if (string.IsNullOrEmpty(Model.FormModel.Message))
        {
            Model.FormModel.Message = "&nbsp;";
        }
        else
        {
            highlightAttr = RazorHelper.Attribute("data-highlight", Model.FormModel.MessageType.ToString().ToLower());
        }

        <div id="form-message" class="border rounded border-slate-300 p-1 my-1" @highlightAttr>@Html.Raw(Model.FormModel.Message)</div>
    }
</div>