@model DbNetSuiteCore.ViewModels.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Enums

<div class="flex flex-col m-1 p-1 relative">
    @if (string.IsNullOrEmpty(Model.GridModel.Caption) == false)
    {
        <div class="flex text-lg caption">@Model.GridModel.Caption</div>
    }
    @if (Model.GridModel.ToolbarPosition == ToolbarPosition.Top)
    {
        @await Html.PartialAsync("Grid/Toolbar", Model)
    }
    <div class="flex mt-2">
        <table class="table-auto border-collapse" data-linkedgridids="@Model.LinkedGridIds">
            <colgroup>
                @if (Model.GridModel._NestedGrids.Any())
                {
                    <col />
                }
                @foreach (GridColumn gridColumn in Model.VisibleColumns)
                {
                    if (Model.GetDataColumn(gridColumn) != null)
                    {
                        <col data-datatype="@gridColumn.DataTypeName" data-dbdatatype="@gridColumn.DbDataType" />
                    }
                }
            </colgroup>

            <thead data-frozen="@(Model.GridModel.HeadingMode == HeadingMode.Frozen)" data-rowselection="@Model.GridModel.RowSelection">
                <tr class="bg-slate-200 heading-row" style="display:@(Model.GridModel.HeadingMode == HeadingMode.Hidden ? "none" : string.Empty)">
                    @if (Model.GridModel.MultiRowSelectLocation == MultiRowSelectLocation.Left)
                    {
                        <th class="text-base"><input class="multi-select" type="checkbox" /></th>
                    }
                    @if (Model.GridModel._NestedGrids.Any())
                    {
                        <th class="text-base w-12"></th>
                    }
                    @foreach (GridColumn gridColumn in Model.VisibleColumns)
                    {
                        if (Model.GetDataColumn(gridColumn) == null)
                        {
                            continue;
                        }
                        if (gridColumn.Sortable)
                        {
                            <th class="text-base" style="cursor:pointer" data-key="@gridColumn.Key" data-columnname="@gridColumn.ColumnName.ToLower()" hx-vals='{"sortKey":"@gridColumn.Key"}' hx-post="@Model.SubmitUrl" hx-target="next tbody" hx-swap="outerHTML" hx-indicator="next .htmx-indicator">
                                <div class="flex flex-row justify-between items-center">@gridColumn?.Label<span class="text-slate-400"></span></div>
                            </th>
                        }
                        else
                        {
                            <th class="text-base">@gridColumn?.Label</th>
                        }
                    }
                    @if (Model.GridModel.MultiRowSelectLocation == MultiRowSelectLocation.Right)
                    {
                        <th class="text-base"><input class="multi-select" type="checkbox" /></th>
                    }
                </tr>

                @if (Model.GridModel.FilterColumns.Any())
                {
                    <tr class="filter-row">
                        @if (Model.GridModel.MultiRowSelectLocation == MultiRowSelectLocation.Left)
                        {
                            <th class="text-base"></th>
                        }
                        @if (Model.GridModel._NestedGrids.Any())
                        {
                            <th class="text-base w-12"></th>
                        }
                        @foreach (GridColumn gridColumn in Model.VisibleColumns)
                        {
                            if (Model.GetDataColumn(gridColumn) != null)
                            {
                                RenderColumnFilter(gridColumn);
                            }
                        }
                        @if (Model.GridModel.MultiRowSelectLocation == MultiRowSelectLocation.Right)
                        {
                            <th class="text-base"></th>
                        }
                    </tr>
                }
            </thead>
            @await Html.PartialAsync("Grid/Rows", Model)
        </table>
    </div>
    @if (Model.GridModel.ToolbarPosition == ToolbarPosition.Bottom)
    {
        @await Html.PartialAsync("Grid/Toolbar", Model)
    }
    <div class="flex">
        @await Html.PartialAsync("HxIndicator")
    </div>
    @await Html.PartialAsync("ToastMessage")
    @if (Model.GridModel.ViewDialog != null)
    {
        @await Html.PartialAsync("Grid/ViewDialog", Model)
    }
</div>

@functions {
    void RenderColumnFilter(GridColumn columnInfo)
    {
        <th class="text-base">
            @if ((columnInfo?.Filter ?? FilterType.None) != FilterType.None)
            {
                if (columnInfo.LookupOptions != null && columnInfo.LookupOptions.Any())
                {
                    RenderColumnSelectFilter(columnInfo.LookupOptions, columnInfo.Key);
                }
                else
                {
                    switch (columnInfo.DataTypeName)
                    {
                        case nameof(Boolean):
                            RenderColumnSelectFilter(GridColumn.BooleanFilterOptions, columnInfo.Key);
                            break;
                        default:
                            <input class="w-full" type="search" name="columnFilter" value="@Model.SearchInput" hx-post="@Model.SubmitUrl" hx-trigger="input changed delay:1000ms, search" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" data-key="@columnInfo.Key" autocomplete="off" />
                            break;
                    }
                }
            }
        </th>
    }

    void RenderColumnSelectFilter(List<KeyValuePair<string, string>> options, string key)
    {
        <select class="column-filter" name="columnFilter" hx-post="@Model.SubmitUrl" hx-trigger="change" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" data-key="@key">
            <option value=""></option>
            @foreach (var option in options)
            {
                <option value="@option.Key">@option.Value</option>
            }
        </select>
    }
}