@model DbNetSuiteCore.Models.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Enums

<div class="flex flex-col m-1 p-1 relative">
    @if (string.IsNullOrEmpty(Model.GridModel.Caption) == false)
    {
        <div class="flex flex-row text-lg caption">@Model.GridModel.Caption</div>
    }
    @if (Model.GridModel.ToolbarPosition == ToolbarPosition.Top)
    {
        @await Html.PartialAsync("Grid/Toolbar", Model)
    }
    <div class="flex mt-2">
        <table class="table-auto border-collapse" data-linkedgridid="@Model.LinkedGridId">
            <colgroup>
                @if (Model.GridModel.NestedGrid != null)
                {
                    <col />
                }
                @foreach (GridColumnModel columnInfo in Model.ColumnInfo)
                {
                    <col data-datatype="@columnInfo.DataTypeName" data-dbdatatype="@columnInfo.DbDataType" />
                }
            </colgroup>
            <thead>
                <tr class="bg-slate-200 heading-row">
                    @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Left)
                    {
                        <th class="text-base"><input class="multi-select" type="checkbox" /></th>
                    }
                    @if (Model.GridModel.NestedGrid != null)
                    {
                        <th class="text-base w-12"></th>
                    }
                    @foreach (GridColumnModel columnInfo in Model.ColumnInfo)
                    {
                        if (columnInfo.Sortable)
                        {
                            <th class="text-base" style="cursor:pointer" data-key="@columnInfo.Key" data-columnname="@columnInfo.ColumnName" hx-vals='{"sortKey":"@columnInfo.Key"}' hx-post="@Model.SubmitUrl" hx-target="next tbody" hx-swap="outerHTML" hx-indicator="next .htmx-indicator">
                                <div class="flex flex-row justify-between items-center">@columnInfo?.Label<span class="text-slate-400"></span></div>
                            </th>
                        }
                        else
                        {
                            <th class="text-base">
                                <div class="flex flex-row justify-between items-center">@columnInfo?.Label</div>
                            </th>
                        }
                    }
                    @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Right)
                    {
                        <th class="text-base"><input class="multi-select" type="checkbox" /></th>
                    }
                </tr>

                @if (Model.ColumnInfo.Any(c => c.Filter))
                {
                    <tr class="filter-row">
                        @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Left)
                        {
                            <th class="text-base"></th>
                        }
                        @if (Model.GridModel.NestedGrid != null)
                        {
                            <th class="text-base w-12"></th>
                        }
                        @foreach (GridColumnModel columnInfo in Model.ColumnInfo)
                        {
                            RenderColumnFilter(columnInfo);
                        }
                        @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Right)
                        {
                            <th class="text-base"></th>
                        }
                    </tr>
                }
            </thead>
            @await Html.PartialAsync("Grid/Rows", Model)
        </table>
    </div>
    @if (Model.GridModel.ToolbarPosition == ToolbarPosition.Bottom)
    {
        @await Html.PartialAsync("Grid/Toolbar", Model)
    }
    <div class="flex">
        @await Html.PartialAsync("HxIndicator")
    </div>
    <div class="absolute flex flex-row" style="left:50%;top:50%;display:none">
        <div id="toastMessage" class="toast-message">
            @IconHelper.Info()
            <span class="pl-1"></span>
        </div>
    </div>
</div>

@functions {
    void RenderColumnFilter(GridColumnModel columnInfo)
    {
        <th class="text-base">
            @if (columnInfo?.Filter ?? false)
            {
                if (columnInfo.LookupOptions != null && columnInfo.LookupOptions.Any())
                {
                    RenderColumnSelectFilter(columnInfo.LookupOptions, columnInfo.Key);
                }
                else
                {
                    switch (columnInfo.DataTypeName)
                    {
                        case nameof(Boolean):
                            RenderColumnSelectFilter(GridColumnModel.BooleanFilterOptions,string.Empty);
                            break;
                        default:
                            <input class="w-full" type="search" name="columnFilter" value="@Model.SearchInput" hx-post="@Model.SubmitUrl" hx-trigger="input changed delay:1000ms, search" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" />
                            break;
                    }
                }
            }
        </th>
    }

    void RenderColumnSelectFilter(List<KeyValuePair<string, string>> options, string key)
    {
        var length = Model.SelectWidth(options) + 1;

        <select class="" style="width:@(length)rem" name="columnFilter" hx-post="@Model.SubmitUrl" hx-trigger="change" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" data-key="@key">
            <option value=""></option>
            @foreach (var option in options)
            {
                <option value="@option.Key">@option.Value</option>
            }
        </select>
    }
}