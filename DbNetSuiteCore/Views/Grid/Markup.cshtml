@model DbNetSuiteCore.ViewModels.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Enums

<div class="flex flex-col m-1 p-1 relative">
    @if (string.IsNullOrEmpty(Model.GridModel.Caption) == false)
    {
        <div class="flex flex-row text-lg caption">@Model.GridModel.Caption</div>
    }
    @if (Model.GridModel.ToolbarPosition == ToolbarPosition.Top)
    {
        @await Html.PartialAsync("Grid/Toolbar", Model)
    }
    <div class="flex mt-2">
        <table class="table-auto border-collapse" data-linkedgridid="@Model.LinkedGridId">
            <colgroup>
                @if (Model.GridModel.NestedGrid != null)
                {
                    <col />
                }
                @foreach (GridColumn gridColumn in Model.VisibleColumns)
                {
                    if (Model.GetDataColumn(gridColumn) != null)
                    {
                        <col data-datatype="@gridColumn.DataTypeName" data-dbdatatype="@gridColumn.DbDataType" />
                    }
                }
            </colgroup>
            <thead data-frozen="@Model.GridModel.FrozenHeader">
                <tr class="bg-slate-200 heading-row">
                    @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Left)
                    {
                        <th class="text-base"><input class="multi-select" type="checkbox" /></th>
                    }
                    @if (Model.GridModel.NestedGrid != null)
                    {
                        <th class="text-base w-12"></th>
                    }
                    @foreach (GridColumn gridColumn in Model.VisibleColumns)
                    {
                        if (Model.GetDataColumn(gridColumn) == null)
                        {
                            continue;
                        }
                        if (gridColumn.Sortable)
                        {
                            <th class="text-base" style="cursor:pointer" data-key="@gridColumn.Key" data-columnname="@gridColumn.ColumnName" hx-vals='{"sortKey":"@gridColumn.Key"}' hx-post="@Model.SubmitUrl" hx-target="next tbody" hx-swap="outerHTML" hx-indicator="next .htmx-indicator">
                                <div class="flex flex-row justify-between items-center">@gridColumn?.Label<span class="text-slate-400"></span></div>
                            </th>
                        }
                        else
                        {
                            <th class="text-base">@gridColumn?.Label</th>
                        }
                    }
                    @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Right)
                    {
                        <th class="text-base"><input class="multi-select" type="checkbox" /></th>
                    }
                </tr>

                @if (Model.Columns.Any(c => c.Filter))
                {
                    <tr class="filter-row">
                        @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Left)
                        {
                            <th class="text-base"></th>
                        }
                        @if (Model.GridModel.NestedGrid != null)
                        {
                            <th class="text-base w-12"></th>
                        }
                        @foreach (GridColumn gridColumn in Model.VisibleColumns)
                        {
                            if (Model.GetDataColumn(gridColumn) != null)
                            {
                                RenderColumnFilter(gridColumn);
                            }
                        }
                        @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Right)
                        {
                            <th class="text-base"></th>
                        }
                    </tr>
                }
            </thead>
            @await Html.PartialAsync("Grid/Rows", Model)
        </table>
    </div>
    @if (Model.GridModel.ToolbarPosition == ToolbarPosition.Bottom)
    {
        @await Html.PartialAsync("Grid/Toolbar", Model)
    }
    <div class="flex">
        @await Html.PartialAsync("HxIndicator")
    </div>
    <div class="absolute flex flex-row" style="left:50%;top:50%;display:none">
        <div id="toastMessage" class="toast-message">
            @IconHelper.Info()
            <span class="pl-1"></span>
        </div>
    </div>
    @if (Model.GridModel.ViewDialog)
    {
        <dialog class="view-dialog dialog border-solid border-2 border-stone-200 rounded-md bg-neutral-100" id="@Model.ViewDialogId">
            <div class="flex flex-col">
                <nav class="dialog-nav">
                    <div class="flex flex-row justify-between items-center border-solid border border-stone-200 bg-stone-200 rounded-md m-1 p-1">
                        <div>
                            <h2 class="font-bold">View</h2>
                        </div>
                        <div>
                            <button button-type="close" type="button" title="Close">@IconHelper.Close()</button>
                        </div>
                    </div>
                </nav>
                <div class="flex view-dialog-content"></div>
                <div class="flex flex-row justify-between items-center border-solid border border-stone-200 bg-stone-200 rounded-md m-1 p-1">
                    <div>
                        <button type="button" button-type="previous" title="Previous row">@IconHelper.Previous()</button>
                        <button type="button" button-type="next" title="Next row">@IconHelper.Next()</button>
                        <input type="hidden" name="@TriggerNames.ViewDialogContent" hx-post="@Model.SubmitUrl" hx-target="#@(Model.ViewDialogId) .view-dialog-content" hx-indicator="previous .htmx-indicator" hx-swap="innerHTML" hx-trigger="changed" />
                    </div>
                    <div>
                        <button type="button" button-type="close">Close</button>
                    </div>
                </div>
            </div>
        </dialog>
    }
</div>

@functions {
    void RenderColumnFilter(GridColumn columnInfo)
    {
        <th class="text-base">
            @if (columnInfo?.Filter ?? false)
            {
                if (columnInfo.LookupOptions != null && columnInfo.LookupOptions.Any())
                {
                    RenderColumnSelectFilter(columnInfo.LookupOptions, columnInfo.Key);
                }
                else
                {
                    switch (columnInfo.DataTypeName)
                    {
                        case nameof(Boolean):
                            RenderColumnSelectFilter(GridColumn.BooleanFilterOptions, string.Empty);
                            break;
                        default:
                            <input class="w-full" type="search" name="columnFilter" value="@Model.SearchInput" hx-post="@Model.SubmitUrl" hx-trigger="input changed delay:1000ms, search" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" />
                            break;
                    }
                }
            }
        </th>
    }

    void RenderColumnSelectFilter(List<KeyValuePair<string, string>> options, string key)
    {
        var length = Model.SelectWidth(options) + 1;

        <select class="" style="width:@(length)rem" name="columnFilter" hx-post="@Model.SubmitUrl" hx-trigger="change" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" data-key="@key">
            <option value=""></option>
            @foreach (var option in options)
            {
                <option value="@option.Key">@option.Value</option>
            }
        </select>
    }
}