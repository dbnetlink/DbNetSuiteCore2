@model GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.ViewModels
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants

<div class="flex flex-row gap-1 items-center bg-slate-50 border border-solid border-slate-300 rounded py-1 px-1">
    @if (Model.GridModel.IsStoredProcedure == false)
    {
        <input class="" style="width:10rem" autofocus type="search" placeholder="@ResourceHelper.GetResourceString(ResourceNames.SearchPlaceholder)" aria-label="Search" name="@TriggerNames.Search" value="@Model.SearchInput" hx-post="@Model.SubmitUrl" hx-trigger="input changed delay:1000ms, search" hx-target="@Model.HxTarget" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" autocomplete="off" />
    }

    <div id="no-records" class="p-1 rounded-md border border-solid border-sky-400 bg-sky-100 flex flex-row gap-2">
        @IconHelper.Info()
        <span>@ResourceHelper.GetResourceString(ResourceNames.NoRecordsFound)</span>
    </div>
    @if (Model.GridModel.ViewDialog != null)
    {
        <button button-type="view" type="button" title="View">@IconHelper.View()</button>
    }
    <div id="navigation" class="flex flex-row gap-1 items-center @(Model.TotalPages == 0 ? "hidden" : "")">
        @{
            RenderNavButton(TriggerNames.First, IconHelper.First(), "First page");
            RenderNavButton(TriggerNames.Previous, IconHelper.Previous(), "Previous page");
            <span class="flex">@ResourceHelper.GetResourceString(ResourceNames.Page)</span>
            RenderPageNumber(Model.GridModel.CurrentPage, Model.TotalPages);
            <span class="flex">@ResourceHelper.GetResourceString(ResourceNames.Of)</span>
            RenderTotalPages(Model.TotalPages);
            <span class="flex">@ResourceHelper.GetResourceString(ResourceNames.Rows)</span>
            RenderRowCount(Model.RowCount);
            RenderNavButton(TriggerNames.Next, IconHelper.Next(), "Next page");
            RenderNavButton(TriggerNames.Last, IconHelper.Last(), "Last page");
        }

        <button button-type="copy" type="button" title="Copy">@IconHelper.Copy()</button>
        <button button-type="export" type="button" title="Export">@IconHelper.Download()</button>
        @{
            RenderExportOptions();
        }
    </div>
    <div id="query-limited" data-querylimit="@Model.GridModel.QueryLimit" class="p-1 rounded-md border border-solid border-orange-400 bg-orange-100 text-orange-700 flex flex-row gap-2">
        @IconHelper.Info("#ea580c")
        <span>@String.Format(ResourceHelper.GetResourceString(ResourceNames.QueryLimited), Model.GridModel.QueryLimit.ToString())</span>
    </div>
</div>

@functions {
    void RenderNavButton(string name, HtmlString icon, string title)
    {
        <button type="button" button-type="@name" title="@title" hx-post="@Model.SubmitUrl" name="@name" hx-target="@Model.HxTarget" hx-indicator="next .htmx-indicator" hx-swap="outerHTML">@icon</button>
    }

    void RenderButton(string name, HtmlString icon, string title)
    {
        <button class="" type="button" button-type="@name" title="@title" hx-post="@Model.SubmitUrl" name="@name" hx-target="@Model.HxTarget" hx-indicator="next .htmx-indicator" hx-swap="outerHTML">@icon</button>
    }

    void RenderPageNumber(int pageNumber, int totalPages)
    {
        <select class="" name="@TriggerNames.Page" value="@pageNumber" hx-post="@Model.SubmitUrl" hx-target="@Model.HxTarget" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" style="padding-right:2em">
            @{
                for (var i = 1; i <= totalPages; i++)
                {
                    <option value="@i" @(i == pageNumber ? "selected" : string.Empty)>@i</option>
                }
            }
        </select>
    }

    void RenderTotalPages(int totalPages)
    {
        <input class="text-center" style="width:@(totalPages.ToString().Length + 1)em" readonly type="text" data-type="total-pages" value="@totalPages" />
    }

    void RenderRowCount(int rowCount)
    {
        <input class="text-center" style="width:@(rowCount.ToString().Length + 1)em" readonly type="text" data-type="row-count" value="@rowCount" />
    }

    void RenderExportOptions()
    {
        var options = new List<string>() { "CSV", "Excel", "HTML", "JSON" };
        <select class="" name="exportformat" style="width:5rem">
            @{
                foreach (var option in options)
                {
                    <option value="@option.ToLower()">@option</option>
                }
            }
        </select>
    }
}