@model DbNetSuiteCore.ViewModels.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using DbNetSuiteCore.Enums
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Extensions
@using Microsoft.AspNetCore.Html
@using System.Text.Json

<tbody id="@Model.HxIdTarget.Replace("#","")" data-currentpage="@Model.GridModel.CurrentPage" data-totalpages="@Model.TotalPages" data-rowcount="@Model.RowCount" data-sortkey="@Model.CurrentSortKey" data-url="@Model.GridModel.Url">
    @foreach (DataRow row in Model.Rows)
    {
        <tr style="cursor:pointer" class="grid-row" @RazorHelper.RowDataAttributes(row, Model.GridModel)>
            @if (Model.GridModel.MultiRowSelectLocation == MultiRowSelectLocation.Left)
            {
                <td class="text-base"><input class="multi-select" type="checkbox" /></td>
            }
            @if (Model.RenderMode == DbNetSuiteCore.Enums.RenderMode.Page && Model.GridModel._NestedGrids.Any())
            {
                if (Model.DataSourceType == DataSourceType.FileSystem)
                {
                    <td class="text-base w-12" data-isfolder="@Model.IsFolder(row).ToString().ToLower()">
                        @if (Model.IsFolder(row))
                        {
                            @Model.RenderNestedButtons(row, IconHelper.Folder(), IconHelper.FolderOpen())
                        }
                        else
                        {
                            @IconHelper.Document()
                        }
                    </td>
                }
                else
                {
                    <td class="text-base w-12">
                        @{
                            @Model.RenderNestedButtons(row, IconHelper.ExpandDown(), IconHelper.ExpandUp())
                        }
                    </td>
                }
            }
            @foreach (GridColumn column in Model.VisibleColumns)
            {
                DataColumn? dataColumn = Model.GetDataColumn(column);

                if (dataColumn == null)
                {
                    continue;
                }
                var classes = new List<string>() { "text-base", "align-top" };

                if (row[dataColumn] == System.DBNull.Value || row[dataColumn] == null)
                {
                    <td @RazorHelper.CellDataAttributes(classes, "", column.Style)>&nbsp;</td>
                    continue;
                }

                if (column.DataType == typeof(Boolean) && (column.EnumOptions?.Any() ?? false) == false)
                {
                    classes.Add("text-center");
                    var boolValue = Convert.ToBoolean(Convert.ToInt16(row[dataColumn]));
                    <td @RazorHelper.CellDataAttributes(classes, boolValue, column.Style)>
                        <div class="flex justify-center items-center">@(boolValue ? IconHelper.Checked() : IconHelper.Unchecked())</div>
                    </td>
                }
                else if (column.LookupOptions != null && column.LookupOptions.Any())
                {
                    <td @RazorHelper.CellDataAttributes(classes, row[dataColumn], column.Style)>
                        @Html.Raw(row[dataColumn])
                    </td>
                }
                else if (column.Image != null)
                {
                    <td @RazorHelper.CellDataAttributes(classes, new Byte[0], column.Style)>
                        <div class="border-solid border-2 rounded-sm border-slate-400">
                            @Html.Raw(column.Image.Img(row[dataColumn] as byte[]))
                        </div>
                    </td>
                }
                else
                {
                    if (column.IsNumeric)
                    {
                        classes.Add("text-right");
                    }

                    var value = column.FormatValue(row[dataColumn]!);
                    <td @RazorHelper.CellDataAttributes(classes, row[dataColumn], column.Style)>@Html.Raw(value)</td>
                }
            }

            @if (Model.GridModel.MultiRowSelectLocation == MultiRowSelectLocation.Right)
            {
                <td class="text-base"><input class="multi-select" type="checkbox" /></td>
            }
        </tr>
    }

    @if (Model.RenderMode == DbNetSuiteCore.Enums.RenderMode.Page)
    {
        <tr style="display:none">
            <td colspan="@Model.ColSpan">
                <div>
                    @await Html.PartialAsync("Grid/__Hidden", Model.GridModel)
                    <span style="display:none" id="sortIcon">@Model.SortIcon</span>
                    @{
                        var attributes = new Dictionary<string, string>();
                        attributes["type"] = "hidden";
                        attributes["hx-trigger"] = "changed";
                        attributes["hx-post"] = Model.SubmitUrl;
                        attributes["hx-target"] = "closest tbody";
                        attributes["hx-swap"] = "outerHTML";
                        attributes["hx-indicator"] = "next .htmx-indicator";
                    }
                    @if (Model.GridModel.IsLinked)
                    {
                        <input name="@TriggerNames.ParentKey" value="@Model.GridModel.ParentKey" @RazorHelper.Attributes(attributes) />
                    }
                    <input name="@TriggerNames.Refresh" @RazorHelper.Attributes(attributes) />
                </div>
            </td>

        </tr>
    }

    @if (Model.GridModel.IsLinked && Model.GridModel.TriggerName == TriggerNames.ParentKey)
    {
        <tr style="display:none" class="column-filter-refresh">
            <td colspan="@Model.ColSpan">
                @foreach (var gridColumn in Model.GridModel.Columns.Where(c => c.Lookup != null))
                {
                    @Model.RenderColumnSelectFilterRefresh(gridColumn.LookupOptions ?? new List<KeyValuePair<string, string>>(), gridColumn.Key)
                }
            </td>
        </tr>
    }

    @if (Model.GridModel.Columns.Any(c => string.IsNullOrEmpty(c.FilterError) == false))
    {
        <tr style="display:none" class="column-filter-error">
            <td colspan="@Model.ColSpan">
                @foreach (var gridColumn in Model.GridModel.Columns.Where(c => string.IsNullOrEmpty(c.FilterError) == false))
                {
                    @Model.RenderColumnFilterError(gridColumn)
                }
            </td>
        </tr>
    }

    @if (string.IsNullOrEmpty(Model.GridModel.JsonData) == false)
    {
        <tr>
            <td style="display:none" colspan="@Model.ColSpan">
                <textarea style="display:none" id="jsonData">@Model.GridModel.JsonData</textarea>
            </td>
        </tr>
    }

    @if (string.IsNullOrEmpty(Model.Diagnostics) == false)
    {

    }
</tbody>
