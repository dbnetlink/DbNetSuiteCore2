@model DbNetSuiteCore.ViewModels.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using DbNetSuiteCore.Enums
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Extensions
@using Microsoft.AspNetCore.Html
@using System.Text.Json

<tbody id="@Model.TBodyId" data-currentpage="@Model.GridModel.CurrentPage" data-totalpages="@Model.TotalPages" data-rowcount="@Model.RowCount" data-sortkey="@Model.CurrentSortKey" data-url="@Model.GridModel.Url">
    @foreach (DataRow row in Model.Rows)
    {
        <tr style="cursor:pointer" class="grid-row" @RowDataAttributes(row)>
            @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Left)
            {
                <td class="text-base"><input class="multi-select" type="checkbox" /></td>
            }
            @if (Model.RenderMode == DbNetSuiteCore.Enums.RenderMode.Page && Model.GridModel.NestedGrid != null)
            {
                if (Model.DataSourceType == DataSourceType.FileSystem)
                {
                    <td class="text-base w-12" data-isfolder="@Model.IsFolder(row).ToString().ToLower()">
                        @if (Model.IsFolder(row))
                        {
                            RenderNestedButtons(row, IconHelper.Folder(), IconHelper.FolderOpen());
                        }
                        else
                        {
                            @IconHelper.Document();
                        }
                    </td>
                }
                else
                {
                    <td class="text-base w-12">
                        @{
                            RenderNestedButtons(row, IconHelper.ExpandDown(), IconHelper.ExpandUp());
                        }
                    </td>
                }
            }
            @foreach (GridColumn column in Model.VisibleColumns)
            {
                DataColumn dataColumn = Model.GetDataColumn(column) ?? new DataColumn();
                var classes = new List<string>() { "text-base" };

                if (row[dataColumn] == System.DBNull.Value || row[dataColumn] == null)
                {
                    <td @CellDataAttributes(classes, "", column.Style)>&nbsp;</td>
                    continue;
                }

                if (column.DataType == typeof(Boolean))
                {
                    classes.Add("text-center");
                    var boolValue = Convert.ToBoolean(Convert.ToInt16(row[dataColumn]));
                    <td @CellDataAttributes(classes, boolValue, column.Style)>
                        <div class="flex justify-center items-center">@(boolValue ? IconHelper.Checked() : IconHelper.Unchecked())</div>
                    </td>
                }
                else if (column.LookupOptions != null && column.LookupOptions.Any())
                {
                    <td @CellDataAttributes(classes, row[dataColumn], column.Style)>
                        @row[dataColumn]
                    </td>
                }
                else
                {
                    if (column.IsNumeric)
                    {
                        classes.Add("text-right");
                    }

                    var value = column.FormatValue(row[dataColumn]!);
                    if (column.MaxTextLength.HasValue && value.ToString().Length > column.MaxTextLength.Value)
                    {
                        <td @CellDataAttributes(classes, row[dataColumn], column.Style)>
                            <div class="tooltip" data-tip="@Html.Raw(value)">
                                @Html.Raw($"{value.ToString().Substring(0, column.MaxTextLength.Value)}...")
                            </div>
                        </td>
                    }
                    else
                    {
                        <td @CellDataAttributes(classes, row[dataColumn], column.Style)>@Html.Raw(value)</td>
                    }
                }
            }

            @if (Model.GridModel.MultiRowSelect == MultiRowSelectLocation.Right)
            {
                <td class="text-base"><input class="multi-select" type="checkbox" /></td>
            }
        </tr>
    }

    @if (Model.RenderMode == DbNetSuiteCore.Enums.RenderMode.Page)
    {
        <tr style="display:none">
            <td>
                <div>
                    <input type="hidden" name="model" value="@TextHelper.ObfuscateString(JsonSerializer.Serialize(Model.GridModel))" />
                    <span style="display:none" id="sortIcon">@Model.SortIcon</span>
                    @if (Model.GridModel.IsLinked)
                    {
                        <input type="hidden" name="@TriggerNames.LinkedGrid" hx-trigger="changed" hx-post="@Model.SubmitUrl" hx-target="closest tbody" hx-swap="outerHTML" hx-indicator="next .htmx-indicator" value="@Model.GridModel.ParentKey" />
                    }
                </div>
            </td>

        </tr>
    }

    @if (Model.GridModel.IsLinked && Model.GridModel.TriggerName == TriggerNames.LinkedGrid)
    {
        <tr style="display:none" class="column-filter-refresh">
            <td>
                @foreach (var gridColumn in Model.GridModel.Columns.Where(c => c.Lookup != null))
                {
                    RenderColumnSelectFilter(gridColumn.LookupOptions, gridColumn.Key);
                }
            </td>
        </tr>
    }
</tbody>

@functions {
    public HtmlString RowDataAttributes(DataRow row)
    {
        List<string> dataAttributes = new List<string>();

        if (Model.PrimaryKeyValue(row) != null)
        {
            dataAttributes.Add($"data-id=\"{Model.PrimaryKeyValue(row)}\"");
        }

        foreach (var column in Model.DataOnlyColumns)
        {
            dataAttributes.Add($"data-{column.ColumnName.ToLower()}=\"{row[column.ColumnName]}\"");
        }

        return new HtmlString(string.Join(" ", dataAttributes.ToArray()));
    }

    public HtmlString CellDataAttributes(List<string> classes, object value, string style)
    {
        List<string> dataAttributes = new List<string>();

        dataAttributes.Add($"class=\"{string.Join(" ", classes)}\"");

        if ((value is byte) == false)
        {
            dataAttributes.Add($"data-value=\"{value}\"");
        }
        dataAttributes.Add($"style=\"{style}\"");

        return new HtmlString(string.Join(" ", dataAttributes.ToArray()));
    }

    public static object? FormatValue(object? value, GridColumn? columnInfo)
    {
        if (string.IsNullOrEmpty(columnInfo?.Format))
        {
            return value;
        }

        string format = columnInfo!.Format;

        switch (format)
        {
            case "email":
                value = $"<a href=\"mailto:{value}\">{value}</a>";
                break;
            case "www":
                value = $"<a target=\"_blank\" href=\"{value}\">{value}</a>";
                break;
            default:
                if (columnInfo?.DataType == typeof(DateTime))
                {
                    value = Convert.ToDateTime(value).ToString(format);
                }
                if (columnInfo?.DataType == typeof(Int64))
                {
                    value = Convert.ToInt64(value).ToString(format);
                }
                if (columnInfo?.DataType == typeof(Double))
                {
                    value = Convert.ToDouble(value).ToString(format);
                }

                break;
        }

        return value;
    }

    public void RenderNestedButtons(DataRow row, HtmlString openIcon, HtmlString closedIcon)
    {
        <div class="nested-buttons">
            <button type="button" class="btn-sm">
                @openIcon
            </button>
            <button type="button" class="btn-sm" style="display:none">
                @closedIcon
            </button>
            <button type="button" name="@TriggerNames.NestedGrid" hx-post="@Model.SubmitUrl" hx-target="closest tr" hx-indicator="next .htmx-indicator" hx-swap="afterend" hx-vals='{"primaryKey":"@Model.PrimaryKeyValue(row)"}' hx-trigger="click once" style="display:none">
            </button>
        </div>
    }

    public void RenderColumnSelectFilter(List<KeyValuePair<string, string>> options, string key)
    {
        <select data-key="@key">
            <option value=""></option>
            @foreach (var option in options)
            {
                <option value="@option.Key">@option.Value</option>
            }
        </select>
    }
}