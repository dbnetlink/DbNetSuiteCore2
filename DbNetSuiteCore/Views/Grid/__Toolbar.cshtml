@model GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.ViewModels
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants

<div class="flex flex-row gap-1 items-center bg-slate-50 border border-solid border-slate-300 rounded py-1 px-1">
    @if (Model.GridModel.IsStoredProcedure == false)
    {
        <input class="" style="width:10rem" autofocus type="search" placeholder="@ResourceHelper.GetResourceString(ResourceNames.SearchPlaceholder)" aria-label="Search" name="@TriggerNames.Search" value="@Model.SearchInput" hx-post="@Model.SubmitUrl" hx-trigger="input changed delay:1000ms, search" hx-target="@Model.HxTarget" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" autocomplete="off" />
    }

    <div id="no-records" class="p-1 rounded-md border border-solid border-sky-400 bg-sky-100 flex flex-row gap-2">
        @IconHelper.Info()
        <span>@ResourceHelper.GetResourceString(ResourceNames.NoRecordsFound)</span>
    </div>
    @if (Model.GridModel.Search)
    {
        @RazorHelper.IconButton("Search", IconHelper.Search())
    }
    @if (Model.GridModel.ViewDialog != null)
    {
        <button button-type="view" type="button" title="View">@IconHelper.View()</button>
    }
    <div id="navigation" class="flex flex-row gap-1 items-center @(Model.TotalPages == 0 ? "hidden" : "")">
        @{
            @Model.RenderNavButton(TriggerNames.First, IconHelper.First(), "First page")
            @Model.RenderNavButton(TriggerNames.Previous, IconHelper.Previous(), "Previous page")
            <span class="flex">@ResourceHelper.GetResourceString(ResourceNames.Page)</span>
            @Model.RenderPageNumber(Model.GridModel.CurrentPage, Model.TotalPages)
            <span class="flex">@ResourceHelper.GetResourceString(ResourceNames.Of)</span>
            @Model.RenderTotalPages(Model.TotalPages)
            <span class="flex">@ResourceHelper.GetResourceString(ResourceNames.Rows)</span>
            @Model.RenderRowCount(Model.RowCount)
            @Model.RenderNavButton(TriggerNames.Next, IconHelper.Next(), "Next page")
            @Model.RenderNavButton(TriggerNames.Last, IconHelper.Last(), "Last page")
        }

        <button button-type="copy" type="button" title="Copy">@IconHelper.Copy()</button>
        <button button-type="export" type="button" title="Export">@IconHelper.Download()</button>
        @{
            @Model.RenderExportOptions()
        }
    </div>
    @await Html.PartialAsync("__QueryLimitWarning", Model.GridModel)
</div>