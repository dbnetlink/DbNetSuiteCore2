@model DbNetSuiteCore.Models.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants

<tbody id="@Model.TBodyId" data-currentpage="@Model.CurrentPage" data-totalpages="@Model.TotalPages" data-sortkey="@Model.SortKey">
    @foreach (DataRow row in Model.Rows)
    {
        <tr style="cursor:pointer" class="grid-row">
            @if (Model.GridModel.NestedGrid != null)
            {
                <td class="text-base w-12">
                    <button type="button" name="@TriggerNames.NestedGrid" class="btn btn-active btn-square btn-xs" hx-post="@Model.SubmitUrl" hx-target="closest tr" hx-indicator="next .htmx-indicator" hx-swap="afterend" hx-vals='{"primaryKey":"@Model.PrimaryKeyValue(row)"}'>
                        @IconHelper.ExpandDownIcon()
                    </button>
                    <button type="button" style="display:none" class="btn btn-active btn-square btn-xs">
                        @IconHelper.ExpandDownIcon()
                    </button>
                    <button type="button" style="display:none" class="btn btn-active btn-square btn-xs">
                        @IconHelper.ExpandUpIcon()
                    </button>
                </td>
            }
            @foreach (DataColumn col in Model.Columns)
            {
                GridColumnModel? columnInfo = Model.GetColumnInfo(col);
                var classes = new List<string>() { "text-base" };

                if (columnInfo.IsNumeric)
                {
                    classes.Add("text-right");
                }

                if (columnInfo.DataType == typeof(Boolean))
                {
                    classes.Add("text-center");
                    <td class="@(string.Join(" ",classes))">
                        @if (row[col] != System.DBNull.Value)
                        {
                            <div class="flex justify-center items-center">@Html.Raw(Convert.ToBoolean(Convert.ToInt16(row[col])) ? IconHelper.CheckedIcon() : IconHelper.UncheckedIcon())</div>
                        }
                    </td>
                }
                else
                {
                    var value = FormatValue(row[col], columnInfo);
                    if (columnInfo.MaxTextLength.HasValue && value.ToString().Length > columnInfo.MaxTextLength.Value)
                    {
                        <td class="@(string.Join(" ",classes))">
                            <div class="tooltip" data-tip="@Html.Raw(value)">
                                @Html.Raw($"{value.ToString().Substring(0, columnInfo.MaxTextLength.Value)}...")
                            </div>
                        </td>
                    }
                    else
                    {
                        <td class="@(string.Join(" ",classes))">@Html.Raw(value)</td>
                    }
                }
            }
        </tr>
    }
    <tr>
        <td>
            <div>
                <input type="hidden" name="currentSortKey" value="@Model.CurrentSortKey" />
                <input type="hidden" name="currentSortAscending" value="@Model.CurrentSortAscending.ToString()" />
                <input type="hidden" name="model" value="@TextHelper.ObfuscateString(JsonSerializer.Serialize(Model.GridModel))" />
                <span style="display:none" id="sortIcon">@Model.SortIcon</span>
            </div>
        </td>

    </tr>
</tbody>

@functions {
    public static object? FormatValue(object? value, GridColumnModel? columnInfo)
    {
        if (value == null || value == System.DBNull.Value)
        {
            return "&nbsp;";
        }
        if (string.IsNullOrEmpty(columnInfo?.Format))
        {
            return value;
        }

        string format = columnInfo!.Format;

        switch (format)
        {
            case "email":
                value = $"<a href=\"mailto:{value}\">{value}</a>";
                break;
            case "www":
                value = $"<a target=\"_blank\" href=\"{value}\">{value}</a>";
                break;
            default:
                if (columnInfo?.DataType == typeof(DateTime))
                {
                    value = Convert.ToDateTime(value).ToString(format);
                }
                if (columnInfo?.DataType == typeof(Int64))
                {
                    value = Convert.ToInt64(value).ToString(format);
                }
                if (columnInfo?.DataType == typeof(Double))
                {
                    value = Convert.ToDouble(value).ToString(format);
                }

                break;
        }

        return value;
    }


}