@model DbNetSuiteCore.Models.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using DbNetSuiteCore.Enums
@using DbNetSuiteCore.Extensions
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants

<tbody id="@Model.TBodyId" data-currentpage="@Model.GridModel.CurrentPage" data-totalpages="@Model.TotalPages" data-sortkey="@Model.CurrentSortKey" data-url="@Model.GridModel.Url">
    @foreach (DataRow row in Model.Rows)
    {
        <tr style="cursor:pointer" class="grid-row" data-id="@Model.PrimaryKeyValue(row)">
            @if (Model.RenderMode == DbNetSuiteCore.Enums.RenderMode.Page && Model.GridModel.NestedGrid != null)
            {
                if (Model.DataSourceType == DataSourceType.FileSystem)
                {
                    <td class="text-base w-12" data-isfolder="@Model.IsFolder(row).ToString().ToLower()">
                        @if (Model.IsFolder(row))
                        {
                            RenderNestedButtons(row, IconHelper.Folder(), IconHelper.FolderOpen());
                        }
                        else
                        {
                            @IconHelper.Document();
                        }
                    </td>
                }
                else
                {
                    <td class="text-base w-12">
                        @{
                            RenderNestedButtons(row, IconHelper.ExpandDown(), IconHelper.ExpandUp());
                        }
                    </td>
                }
            }
            @foreach (GridColumnModel columnInfo in Model.ColumnInfo)
            {
                DataColumn col = Model.GetDataColumn(columnInfo);
                var classes = new List<string>() { "text-base" };

                if (row[col] == System.DBNull.Value || row[col] == null)
                {
                    <td class="text-base" data-columnname="@col.ColumnName">&nbsp;</td>
                    continue;
                }

                if (columnInfo.DataType == typeof(Boolean))
                {
                    classes.Add("text-center");
                    var boolValue = Convert.ToBoolean(Convert.ToInt16(row[col]));
                    <td class="@(string.Join(" ",classes))" data-value="@boolValue" data-columnname="@col.ColumnName">
                        <div class="flex justify-center items-center">@(boolValue ? IconHelper.Checked() : IconHelper.Unchecked())</div>
                    </td>
                }
                else if (columnInfo.LookupOptions != null && columnInfo.LookupOptions.Any())
                {
                    <td class="@(string.Join(" ",classes))" data-value="@row[col]" data-columnname="@col.ColumnName">
                        @row[col]
                    </td>
                }
                else
                {
                    if (columnInfo.IsNumeric)
                    {
                        classes.Add("text-right");
                    }

                    var value = columnInfo.FormatValue(row[col]!);
                    if (columnInfo.MaxTextLength.HasValue && value.ToString().Length > columnInfo.MaxTextLength.Value)
                    {
                        <td class="@(string.Join(" ",classes))" data-value="@row[col]" data-columnname="@col.ColumnName">
                            <div class="tooltip" data-tip="@Html.Raw(value)">
                                @Html.Raw($"{value.ToString().Substring(0, columnInfo.MaxTextLength.Value)}...")
                            </div>
                        </td>
                    }
                    else
                    {
                        <td class="@(string.Join(" ",classes))" data-value="@row[col]" data-columnname="@col.ColumnName">@Html.Raw(value)</td>
                    }
                }
            }
        </tr>
    }

    @if (Model.RenderMode == DbNetSuiteCore.Enums.RenderMode.Page)
    {
        <tr style="display:none">
            <td>
                <div>
                    <input type="hidden" name="model" value="@TextHelper.ObfuscateString(JsonSerializer.Serialize(Model.GridModel))" />
                    <span style="display:none" id="sortIcon">@Model.SortIcon</span>
                    @if (Model.GridModel.IsLinked || Model.GridModel.IsNested)
                    {
                        <input type="hidden" name="primaryKey" hx-trigger="changed" hx-post="@Model.SubmitUrl" hx-target="closest tbody" hx-swap="outerHTML" hx-indicator="next .htmx-indicator" value="@Model.GridModel.ParentKey" />
                    }
                </div>
            </td>

        </tr>
    }
</tbody>

@functions {
    public static object? FormatValue(object? value, GridColumnModel? columnInfo)
    {
        if (string.IsNullOrEmpty(columnInfo?.Format))
        {
            return value;
        }

        string format = columnInfo!.Format;

        switch (format)
        {
            case "email":
                value = $"<a href=\"mailto:{value}\">{value}</a>";
                break;
            case "www":
                value = $"<a target=\"_blank\" href=\"{value}\">{value}</a>";
                break;
            default:
                if (columnInfo?.DataType == typeof(DateTime))
                {
                    value = Convert.ToDateTime(value).ToString(format);
                }
                if (columnInfo?.DataType == typeof(Int64))
                {
                    value = Convert.ToInt64(value).ToString(format);
                }
                if (columnInfo?.DataType == typeof(Double))
                {
                    value = Convert.ToDouble(value).ToString(format);
                }

                break;
        }

        return value;
    }

    public void RenderNestedButtons(DataRow row, HtmlString openIcon, HtmlString closedIcon)
    {
        <div class="nested-buttons">
            <button type="button" class="btn-sm">
                @openIcon
            </button>
            <button type="button" class="btn-sm" style="display:none">
                @closedIcon
            </button>
            <button type="button" name="@TriggerNames.NestedGrid" hx-post="@Model.SubmitUrl" hx-target="closest tr" hx-indicator="next .htmx-indicator" hx-swap="afterend" hx-vals='{"primaryKey":"@Model.PrimaryKeyValue(row)"}' hx-trigger="click once" style="display:none">
            </button>
        </div>
    }
}