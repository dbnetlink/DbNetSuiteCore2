@model TQ.Models.FormViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetTimeCore.Enums
@using TQ.Models
@using Microsoft.AspNetCore.Html

<tr class="form-row">
    <td colspan="@Model.ColSpan">
        <form name="edit-form">
            <div class="flex flex-col border-solid border border-slate-300 bg-slate-100 rounded-md">
                <div class="flex m-2">

                    <table class="htmx-table">
                        <tbody>

                            <tr>
                                @foreach (DataColumn col in Model.Columns)
                                {
                                    EditColumnModel? columnInfo = Model.GetColumnInfo(col);
                                    if (columnInfo!.IsPrimaryKey)
                                    {
                                        continue;
                                    }
                                    <th>@columnInfo.Label</th>
                                }
                            </tr>
                            <tr>
                                @{
                                    DataRow row = Model.Row;
                                    foreach (DataColumn col in Model.Columns)
                                    {
                                        EditColumnModel? editColumnModel = Model.GetColumnInfo(col);
                                        if (editColumnModel!.IsPrimaryKey)
                                        {
                                            continue;
                                        }
                                        <td class="align-top">
                                            @{
                                                switch (editColumnModel.EditControlType)
                                                {
                                                    case EditControlType.MultiSelect:
                                                        RenderMultiSelect(col.ColumnName, Model.ColumnValue(col), editColumnModel);
                                                        break;
                                                    case EditControlType.Lookup:
                                                        RenderSelect(col.ColumnName, Model.ColumnValue(col), editColumnModel);
                                                        break;
                                                    case EditControlType.EnumLookup:
                                                        RenderEnumSelect(col.ColumnName, Model.ColumnValue(col), editColumnModel);
                                                        break;
                                                    case EditControlType.TextArea:
                                                        <textarea class="@editColumnModel.ClassNames" name="@col.ColumnName">@(Model.ColumnValue(col))</textarea>
                                                        break;
                                                    case EditControlType.Checkbox:
                                                        <input type="checkbox" name="@col.ColumnName" class="@editColumnModel.ClassNames" @(IsBoolean(Model.ColumnValue(col)) ? "checked" : null) />
                                                        break;
                                                    default:
                                                        <input type="text" name="@col.ColumnName" class="@editColumnModel.ClassNames" @(editColumnModel.IsPrimaryKey ? "disabled" : null) value="@Html.Raw(Model.ColumnValue(col))" />
                                                        break;
                                                }
                                            }
                                        </td>
                                    }
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
                <hr class="h-px my-1 bg-gray-200 border-0 dark:bg-gray-700">
                <div class="flex m-2 justify-end gap-4">
                    <div id="@(Model.FormId)formMessage" class="message flex grow border-solid border border-slate-300 bg-slate-100 rounded-md px-2 align-middle items-center"></div>
                    <button class="btn btn-primary" type="button" hx-vals='{"colSpan":"@(Model.ColSpan)"}' hx-post="@Model.SaveUrl(Model.Row)" hx-target="closest tr" hx-swap="outerHTML">Save</button>
                    <button class="btn cancel-btn" type="button" hx-post="@Model.SubmitUrl" hx-target="#@Model.FormId" hx-swap="innerHTML">Cancel</button>
                    @if (!string.IsNullOrEmpty(Model.Message))
                    {
                        <script>
                            var inErrorState = @(Model.InErrorState.ToString().ToLower());
                            me(".message").innerText = "@(Model.Message)";

                            if (inErrorState) {
                                me(".message").classAdd("font-bold").classAdd("bg-red-300");
                                document.querySelector(".in-error").focus()
                            }
                            else {
                                me(".message").classAdd("font-bold").classAdd("bg-teal-300");
                            }
                            setTimeout(@(Model.FormId)clearMessage, 3000);

                            function @(Model.FormId)clearMessage() {
                                if (inErrorState) {
                                    me(".message").classRemove("bg-red-300").innerText = '';
                                }
                                else {
                                    me(".cancel-btn").click();
                                }
                                
                            }
                        </script>
                    }
                </div>
            </div>
        </form>
    </td>
</tr>

@functions {
    bool IsBoolean(object value)
    {
        try
        {
            return Convert.ToBoolean(Convert.ToInt16(value));
        }
        catch
        {
            return false;
        }
    }

    void RenderNavButton(bool enable, string url, HtmlString icon, string title)
    {
        <button class="btn btn-sm p-1" type="button" title="@title" @(enable ? null : "disabled")>@icon</button>
    }

    void RenderMultiSelect(string columnName, string value, EditColumnModel editColumnModel)
    {
        var values = value.Split(",").ToList();
        <select class="@editColumnModel.ClassNames" multiple size="5" name="@columnName" value="@value">
            @foreach (KeyValuePair<string, string> option in EnumHelper.GetEnumOptions(editColumnModel.LookupEnum))
            {
                <option value="@option.Key" @(values.Contains(option.Key) ? "selected" : string.Empty)>@option.Value</option>
            }
        </select>
    }

    void RenderSelect(string columnName, string value, EditColumnModel editColumnModel)
    {
        <select class="@editColumnModel.ClassNames" name="@columnName" value="@value">
            @foreach (DataRow option in editColumnModel.LookupValues.Rows)
            {
                <option value="@option[0].ToString()" @(value == option[0].ToString() ? "selected" : string.Empty)>@option[1].ToString()</option>
            }
        </select>
    }

    void RenderEnumSelect(string columnName, string value, EditColumnModel editColumnModel)
    {
        <select class="@editColumnModel.ClassNames" name="@columnName" value="@value">
            @foreach (KeyValuePair<string, string> option in EnumHelper.GetEnumOptions(editColumnModel.LookupEnum))
            {
                <option value="@option.Key" @(value == option.Key ? "selected" : string.Empty)>@option.Value</option>
            }
        </select>
    }
}