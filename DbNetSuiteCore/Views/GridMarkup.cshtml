@model TQ.Models.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using TQ.Models
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants

<div class="flex flex-col">
    <div class="flex flex-row gap-1 items-center">
        <input class="input input-bordered input-sm" autofocus type="search" placeholder="Search" aria-label="Search" name="searchInput" value="@Model.SearchInput" hx-post="@Model.SubmitUrl" hx-trigger="input changed delay:500ms, search" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" />
        <!-- <button class="btn btn-sm mr-5 p-1" type="button" name="@(TriggerNames.Search)" hx-post="@Model.SubmitUrl" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="innerHTML" title="Search">@Html.Raw(IconHelper.SearchIcon())</button> -->
        @if (Model.TotalPages == 0)
        {
            <div class="p-1 rounded-md border-solid border-slate-300 bg-slate-100 flex flex-row gap-2">
                @Html.Raw(IconHelper.InfoIcon())
                <span>No records found</span>
            </div>
        }
        else
        {
            RenderNavButton(TriggerNames.First, IconHelper.FirstIcon(), "First page");
            RenderNavButton(TriggerNames.Previous, IconHelper.PreviousIcon(), "Previous page");
            <span class="">Page</span>
            RenderPageNumber(Model.CurrentPage, Model.TotalPages);
            <span class="">of</span>
            RenderTotalPages(Model.TotalPages);
            RenderNavButton(TriggerNames.Next, IconHelper.NextIcon(), "Next page");
            RenderNavButton(TriggerNames.Last, IconHelper.LastIcon(), "Last page");
        }

        <button class="btn btn-sm ml-5 p-1" button-type="copy" type="button" title="Copy">@Html.Raw(IconHelper.CopyIcon())</button>
        <button class="btn btn-sm p-1" button-type="export" type="button" title="Export">@Html.Raw(IconHelper.DownloadIcon())</button>
        @{
            RenderExportOptions();
        }
    </div>
    <div class="flex mt-2">
        <table class="table table-xs">
            <thead>
                <tr class="bg-slate-200">
                    @if (Model.GridModel.NestedGrid != null)
                    {
                        <th class="text-base w-12"></th>
                    }
                    @foreach (GridColumnModel columnInfo in Model.ColumnInfo)
                    {
                        if (columnInfo.Sortable)
                        {
                            <th class="text-base" style="cursor:pointer" data-key="@(columnInfo.Key)" data-columnname="@(columnInfo.ColumnName)" hx-vals='{"sortKey":"@(columnInfo.Key)"}' hx-post="@Model.SubmitUrl" hx-target="next tbody" hx-swap="outerHTML" hx-indicator="next .htmx-indicator">
                                <div class="flex flex-row justify-between items-center">@(columnInfo?.Label) <span class="text-slate-400"></span></div>
                            </th>
                        }
                        else
                        {
                            <th class="text-base">
                                <div class="flex flex-row justify-between items-center">@(columnInfo?.Label)</div>
                            </th>
                        }
                    }
                </tr>

                @if (Model.ColumnInfo.Any(c => c.Filter))
                {
                    <tr class="filter-row">
                        @if (Model.GridModel.NestedGrid != null)
                        {
                            <th class="text-base w-12"></th>
                        }
                        @foreach (DataColumn col in Model.Columns)
                        {
                            GridColumnModel? columnInfo = Model.GetColumnInfo(col);
                            if (columnInfo.Filter)
                            {
                                <th class="text-base"><input class="input input-bordered input-sm w-24" type="search" aria-label="Search" name="columnFilter" value="@Model.SearchInput" hx-post="@Model.SubmitUrl" hx-trigger="input changed delay:500ms, search" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" /></th>
                            }
                            else
                            {
                                <th class="text-base"></th>
                            }
                        }
                    </tr>
                }
            </thead>
            @await Html.PartialAsync("GridRows", Model)
        </table>
        @await Html.PartialAsync("HxIndicator")
        <div class="toast toast-center toast-middle" style="display:none">
            <div class="alert">
                <span></span>
            </div>
        </div>
    </div>
</div>

@functions {
    void RenderNavButton(string name, HtmlString icon, string title)
    {
        <button class="btn btn-sm p-1" type="button" button-type="@name" title="@title" hx-post="@Model.SubmitUrl" name="@name" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML">@icon</button>
    }

    void RenderPageNumber(int pageNumber, int totalPages)
    {
        <select class="select select-bordered select-sm" name="@TriggerNames.Page" value="@pageNumber" hx-post="@Model.SubmitUrl" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML">
            @{
                for (var i = 1; i <= totalPages; i++)
                {
                    <option value="@i" @(i == pageNumber ? "selected" : string.Empty)>@i</option>
                }
            }
        </select>
    }

    void RenderTotalPages(int totalPages)
    {
        <input class="input input-bordered input-sm" style="width:@(totalPages.ToString().Length + 2)em" readonly type="text" value="@totalPages" />
    }

    void RenderExportOptions()
    {
        var options = new List<string>() { "CSV", "Excel", "HTML", "JSON" };
        <select class="select select-bordered select-sm" name="exportformat">
            @{
                foreach (var option in options)
                {
                    <option value="@option.ToLower()">@option</option>
                }
            }
        </select>
    }
}