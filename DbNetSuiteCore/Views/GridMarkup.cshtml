@model DbNetSuiteCore.Models.GridViewModel
@using System.Data
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Enums

<div class="flex flex-col m-1 p-1">
    <div class="flex flex-row text-lg">@Model.GridModel.Caption</div>
    @if (Model.GridModel.ToolbarPosition == ToolbarPosition.Top)
    {
        @await Html.PartialAsync("GridToolbar", Model)
    }
    <div class="flex mt-2">
        <table class="table table-xs">
            <thead>
                <tr class="bg-slate-200">
                    @if (Model.GridModel.NestedGrid != null)
                    {
                        <th class="text-base w-12"></th>
                    }
                    @foreach (GridColumnModel columnInfo in Model.ColumnInfo)
                    {
                        if (columnInfo.Sortable)
                        {
                            <th class="text-base" style="cursor:pointer" data-key="@(columnInfo.Key)" data-columnname="@(columnInfo.ColumnName)" hx-vals='{"sortKey":"@(columnInfo.Key)"}' hx-post="@Model.SubmitUrl" hx-target="next tbody" hx-swap="outerHTML" hx-indicator="next .htmx-indicator">
                                <div class="flex flex-row justify-between items-center">@(columnInfo?.Label) <span class="text-slate-400"></span></div>
                            </th>
                        }
                        else
                        {
                            <th class="text-base">
                                <div class="flex flex-row justify-between items-center">@(columnInfo?.Label)</div>
                            </th>
                        }
                    }
                </tr>

                @if (Model.ColumnInfo.Any(c => c.Filter))
                {
                    <tr class="filter-row">
                        @if (Model.GridModel.NestedGrid != null)
                        {
                            <th class="text-base w-12"></th>
                        }
                        @foreach (DataColumn col in Model.Columns)
                        {
                            RenderColumnFilter(col);
                        }
                    </tr>
                }
            </thead>
            @await Html.PartialAsync("GridRows", Model)
        </table>
    </div>
    @if (Model.GridModel.ToolbarPosition == ToolbarPosition.Bottom)
    {
        @await Html.PartialAsync("GridToolbar", Model)
    }
    <div class="flex"">
        @await Html.PartialAsync("HxIndicator")
        <div class="toast toast-center toast-middle" style="display:none">
            <div class="alert">
                <span></span>
            </div>
        </div>
    </div>
</div>



@functions {
    void RenderColumnFilter(DataColumn dataColumn)
    {
        GridColumnModel? columnInfo = Model.GetColumnInfo(dataColumn);
        <th class="text-base">
            @if (columnInfo?.Filter ?? false)
            {
                if (columnInfo.LookupOptions != null)
                {
                    RenderColumnSelectFilter(columnInfo.LookupOptions);
                }
                else
                {
                    switch (columnInfo.DataTypeName)
                    {
                        case nameof(Boolean):
                            RenderColumnSelectFilter(GridColumnModel.BooleanFilterOptions);
                            break;
                        default:
                            <input class="input input-bordered input-sm w-full" type="search" name="columnFilter" value="@Model.SearchInput" hx-post="@Model.SubmitUrl" hx-trigger="input changed delay:1000ms, search" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML" />
                            break;
                    }
                }
            }
        </th>
    }

    void RenderColumnSelectFilter(List<KeyValuePair<string, string>> options)
    {
        <select class="select select-bordered select-sm" name="columnFilter" hx-post="@Model.SubmitUrl" hx-trigger="change" hx-target="next tbody" hx-indicator="next .htmx-indicator" hx-swap="outerHTML">
            <option value=""></option>
            @foreach (var option in options)
            {
                <option value="@option.Key">@option.Value</option>
            }
        </select>
    }
}