<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Added" xml:space="preserve">
    <value>Record has been added</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="ApplyChanges" xml:space="preserve">
    <value>Apply your changes</value>
  </data>
  <data name="Between" xml:space="preserve">
    <value>Between</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CancelChanges" xml:space="preserve">
    <value>Cancel your changes</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="ColumnFilterNoData" xml:space="preserve">
    <value>No filter value supplied</value>
  </data>
  <data name="ConfirmDelete" xml:space="preserve">
    <value>Please confirm deletion of current record</value>
  </data>
  <data name="Contains" xml:space="preserve">
    <value>Contains</value>
  </data>
  <data name="DataFormatError" xml:space="preserve">
    <value>Format of entered data is not valid</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Record has been deleted</value>
  </data>
  <data name="DoesNotContain" xml:space="preserve">
    <value>Does not contain</value>
  </data>
  <data name="DoesNotEndWith" xml:space="preserve">
    <value>Does not end with</value>
  </data>
  <data name="DoesNotStartWith" xml:space="preserve">
    <value>Does not start with</value>
  </data>
  <data name="Ends with" xml:space="preserve">
    <value>Ends with</value>
  </data>
  <data name="EndsWith" xml:space="preserve">
    <value>Ends with</value>
  </data>
  <data name="EqualTo" xml:space="preserve">
    <value>Equal to</value>
  </data>
  <data name="False" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="First" xml:space="preserve">
    <value>First</value>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>Greater Than</value>
  </data>
  <data name="In" xml:space="preserve">
    <value>In</value>
  </data>
  <data name="Insert" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="IsEmpty" xml:space="preserve">
    <value>Is empty</value>
  </data>
  <data name="IsNotEmpty" xml:space="preserve">
    <value>Is not empty</value>
  </data>
  <data name="Last" xml:space="preserve">
    <value>Last</value>
  </data>
  <data name="LessThan" xml:space="preserve">
    <value>Less than</value>
  </data>
  <data name="MatchAll" xml:space="preserve">
    <value>Match all the criteria</value>
  </data>
  <data name="MatchAtLeastOne" xml:space="preserve">
    <value>Match at leat one of the criteria</value>
  </data>
  <data name="MaxCharsError" xml:space="preserve">
    <value>A maximum of {0} characters must be entered</value>
  </data>
  <data name="MaxValueError" xml:space="preserve">
    <value>Entered {0} must be less than {1}</value>
  </data>
  <data name="MinCharsError" xml:space="preserve">
    <value>A minmum of {0} characters must be entered</value>
  </data>
  <data name="MinValueError" xml:space="preserve">
    <value>Entered {0} must be greater than {1}</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NoFilesFound" xml:space="preserve">
    <value>No files found</value>
  </data>
  <data name="NoRecordsFound" xml:space="preserve">
    <value>No records found</value>
  </data>
  <data name="NotBetween" xml:space="preserve">
    <value>Not between</value>
  </data>
  <data name="NotEqualTo" xml:space="preserve">
    <value>Not equal to</value>
  </data>
  <data name="NotGreaterThan" xml:space="preserve">
    <value>Not greater than</value>
  </data>
  <data name="NotIn" xml:space="preserve">
    <value>Not in</value>
  </data>
  <data name="NotLessThan" xml:space="preserve">
    <value>Not less than</value>
  </data>
  <data name="Of" xml:space="preserve">
    <value>of</value>
  </data>
  <data name="Page" xml:space="preserve">
    <value>Page</value>
  </data>
  <data name="PatternError" xml:space="preserve">
    <value>Entered value does not match the required pattern</value>
  </data>
  <data name="Previous" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="PrimaryKeyExists" xml:space="preserve">
    <value>A record with the entered primary key already exists</value>
  </data>
  <data name="QueryLimited" xml:space="preserve">
    <value>Query limited to {0} rows</value>
  </data>
  <data name="RangeValueError" xml:space="preserve">
    <value>Entered {0} must be between {1} and {2}</value>
  </data>
  <data name="Record" xml:space="preserve">
    <value>Record</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Highlighted fields are required</value>
  </data>
  <data name="Rows" xml:space="preserve">
    <value>Rows</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchPlaceholder" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="StartsWith" xml:space="preserve">
    <value>Starts with</value>
  </data>
  <data name="True" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="UnappliedChanges" xml:space="preserve">
    <value>You have unapplied changes. Please apply or cancel.</value>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Record has been updated</value>
  </data>
</root>